v3.4.7-hotfix-response-handling
- **紧急修复：全面增强API响应处理，修复中转站兼容性**
  - **问题:** 当使用某些API中转站时，插件的API测试、调用及模型列表获取功能均可能失败，报告 `Invalid or empty response` 或 `未返回有效模型列表` 等错误。根本原因是部分代理返回的响应体是JSON字符串，而非标准的JSON对象，导致插件无法正确解析。
  - **实现方式:**
    - **1. 全面健壮化响应解析 (`scripts/settings/standaloneAPI.js`):**
        - 在 `testApiConnection`、`handleCustomAPIRequest` 和 `updateModelList` 三个核心API函数中，都增加了对返回数据的预处理逻辑。
        - 新逻辑会统一检查收到的 `data` 是否为字符串。如果是，则尝试使用 `JSON.parse()` 将其转换为JSON对象，然后再进行后续处理。
    - **2. 增强日志与错误提示 (`scripts/settings/standaloneAPI.js`):**
        - 在所有三个函数中，都加入了 `console.log` 来记录从API收到的原始响应数据，方便未来调试。
        - 当响应中找不到有效内容时，抛出的错误信息现在会包含完整的响应体（`响应: ${JSON.stringify(responseData)}`），使问题定位更加直观、精准。
  - **结果:**
    - **兼容性完美提升:** 插件现在能够正确处理所有自定义API场景下（测试、调用、获取模型）来自不同代理的响应，彻底解决了因响应格式不一致引发的所有已知问题。
    - **可调试性增强:** 详细的控制台日志和错误信息使得排查新的API问题变得更加容易。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.0-custom-api-refactor
- **核心重构：废弃独立API逻辑，全面转向SillyTavern原生API调用**
  - **问题:** 插件旧有的自定义API功能通过一个复杂的、自行实现的`LLMApiService`来处理请求，并提供了“代理/直连”切换选项。这种方式不仅代码冗余，而且无法完全兼容SillyTavern的所有功能（如模型列表获取、原生流式传输），导致用户体验不佳且维护困难。
  - **解决方案:** 废弃整个自定义的API请求链路，将插件的API调用逻辑完全并入SillyTavern的前端原生API体系。
  - **实现方式:**
    - **1. 废弃冗余代码 (`services/llmApi.js`):**
        - **完全删除了** `services/llmApi.js` 文件及其包含的 `LLMApiService` 类，移除了不必要的抽象层。
    - **2. 重构核心请求 (`scripts/settings/standaloneAPI.js`):**
        - 重写了 `handleCustomAPIRequest` 和 `testApiConnection` 函数。
        - **现在直接调用** 酒馆全局暴露的 `sendOpenAIRequest` 函数来发送所有API请求。
        - 在调用前，通过修改全局的 `oai_settings` 对象，临时将API源 (`chat_completion_source`) 设置为 `'custom'`，并填入用户自定义的URL、API密钥和模型名称。请求完成后，立即恢复原始设置。
    - **3. 修复模型列表获取 (`scripts/settings/standaloneAPI.js`):**
        - 重写了 `updateModelList` 函数。
        - 新逻辑直接向酒馆后端的 `/api/completions/status` 端点发送一个 `POST` 请求，并将 `chat_completion_source` 设为 `'custom'`，从而以原生方式获取模型列表。
    - **4. 简化UI与配置 (`assets/templates/index.html`, `data/pluginSetting.js`, `scripts/settings/userExtensionSetting.js`):**
        - **移除了** “通过酒馆代理API”的复选框及其对应的 `use_tavern_proxy` 配置项。
        - **新增了** “流式传输” (`custom_api_stream`) 选项，默认关闭，允许用户自行控制。
        - 更新了UI绑定逻辑，以适应新的配置项。
  - **结果:**
    - **完美集成:** 插件现在完全使用SillyTavern的官方API管道，确保了最佳的兼容性和稳定性。
    - **功能完整:** 自定义API现在可以**原生支持流式传输**，并且**能够可靠地获取模型列表**，解决了所有历史遗留问题。
    - **代码简化:** 代码库更加简洁，可维护性显著提高。
    - **体验提升:** 用户不再需要理解复杂的“代理”概念，只需关心是否需要“流式传输”，交互更加直观。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js` (重构)
    - `services/llmApi.js` (已删除)
    - `assets/templates/index.html` (UI调整)
    - `data/pluginSetting.js` (配置项更新)
    - `scripts/settings/userExtensionSetting.js` (UI绑定更新)
    - `项目文档.txt` (新增此条目)

v3.4.1-hotfix-import-path
- **紧急修复：修正原生API导入路径错误**
  - **问题:** v3.4.0重构后，`scripts/settings/standaloneAPI.js` 中引入了对酒馆主 `script.js` 的导入，但使用了错误的相对路径 (`../../../script.js`)，导致插件在加载时因找不到文件而崩溃 (404 Not Found)。
  - **实现方式:**
    - **1. 修正路径 (`scripts/settings/standaloneAPI.js`):**
        - 将错误的相对路径导入 `import { ... } from '../../../script.js';`
        - **修改为正确的绝对路径导入** `import { ... } from '/script.js';`，确保插件能从Web服务器根目录正确加载酒馆的核心脚本。
  - **结果:**
    - **加载错误解决:** 插件现在可以正常加载，之前因路径错误导致的404问题已被修复。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.6-hotfix-streaming-removal
- **功能简化：移除未实现的流式传输选项**
  - **问题:** v3.4.0重构引入了一个“流式传输”的UI选项，但其后端逻辑并未完全实现，导致用户勾选后程序报错。
  - **实现方式:**
    - **1. 移除UI元素 (`assets/templates/index.html`):**
        - **删除了** “流式传输”复选框及其相关描述。
    - **2. 移除配置项 (`data/pluginSetting.js`):**
        - **删除了** `custom_api_stream` 默认设置。
    - **3. 移除UI绑定 (`scripts/settings/userExtensionSetting.js`):**
        - **删除了** 对已不存在的复选框的事件监听和状态更新逻辑。
    - **4. 硬编码非流式 (`scripts/settings/standaloneAPI.js`):**
        - 在 `handleCustomAPIRequest` 函数中，**移除了**对 `custom_api_stream` 的检查，并将发送给后端的请求数据中的 `stream` 参数**硬编码为 `false`**。
  - **结果:**
    - **逻辑统一:** 插件的自定义API功能现在统一为非流式请求，符合当前已实现的功能，消除了用户的困惑和潜在的运行时错误。
    - **代码更清晰:** 移除了与未实现功能相关的代码，提高了可维护性。
  - **受影响文件:**
    - `assets/templates/index.html`
    - `data/pluginSetting.js`
    - `scripts/settings/userExtensionSetting.js`
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.5-hotfix-test-logic
- **紧急修复：修正API测试时的逻辑错误**
  - **问题:** API测试函数 (`testApiConnection`) 虽然能正确发送请求，但在构造请求时，没有将用户在UI中输入的`modelName`和`apiUrl`临时应用到全局设置中，导致测试时使用的仍然是旧的、已保存的模型和URL配置，与用户预期不符。
  - **实现方式:**
    - **1. 临时覆盖设置 (`scripts/settings/standaloneAPI.js`):**
        - 在 `testApiConnection` 函数的 `try` 块开始时，不仅覆盖了 `oai_settings`，还**额外覆盖了** `USER.IMPORTANT_USER_PRIVACY_DATA.custom_model_name` 和 `oai_settings.openai_reverse_proxy`。
    - **2. 确保恢复 (`scripts/settings/standaloneAPI.js`):**
        - 将所有恢复原始设置的操作移入一个 `finally` 块中，确保无论测试成功还是失败，用户的原始设置总能被正确还原。
  - **结果:**
    - **测试逻辑正确:** API测试功能现在会准确地使用用户在UI中提供的模型和URL进行测试，测试结果能够正确反映当前输入配置的有效性。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.4-hotfix-api-endpoint
- **紧急修复：修正获取模型列表的API端点路径**
  - **问题:** 在v3.4.3中，虽然请求方法被修正为`$.ajax`，但API端点URL `/api/completions/status` 仍然是错误的，导致服务器返回 `404 Not Found`。
  - **实现方式:**
    - **1. 修正URL (`scripts/settings/standaloneAPI.js`):**
        - 通过分析SillyTavern的后端路由结构，确定了正确的API端点。
        - 将 `updateModelList` 函数中的URL从 `/api/completions/status` **修正为** `/api/backends/chat-completions/status`。
  - **结果:**
    - **404错误解决:** 获取模型列表的请求现在指向了正确的后端路由，功能完全恢复正常。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.3-hotfix-csrf-token
- **紧急修复：修正模型列表获取时的CSRF令牌问题**
  - **问题:** v3.4.2修复导入问题后，`updateModelList` 函数虽然指向了正确的模块，但其使用的 `fetch` API 仍然无法自动附加SillyTavern必需的CSRF安全令牌，导致请求被服务器以 `403 Forbidden` 错误拒绝。
  - **实现方式:**
    - **1. 替换请求方法 (`scripts/settings/standaloneAPI.js`):**
        - 将 `updateModelList` 函数中使用的 `fetch` API 调用，**替换为 jQuery 的 `$.ajax` 方法**。
        - SillyTavern的前端配置了一个全局的 `$.ajaxPrefilter`，它会自动为所有 `$.ajax` 请求添加 `X-CSRF-Token` 请求头，从而解决了权限问题。
  - **结果:**
    - **权限错误解决:** 获取模型列表的请求现在能够通过服务器的安全验证，功能恢复正常。这是对原生API集成的最终修正。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.2-hotfix-export-name
- **紧急修复：修正模块导出名称错误**
  - **问题:** v3.4.1修复路径后，暴露出新的问题：SillyTavern的 `script.js` 并非一个标准的ES模块，它不会直接 `export` 变量。相反，它将 `oai_settings` 等变量挂载在`/public/scripts/openai.js`上。直接从 `/script.js` 导入它们会导致 `does not provide an export named 'oai_settings'` 错误。
  - **实现方式:**
    - **1. 修正导入源 (`scripts/settings/standaloneAPI.js`):**
        - 将导入语句从 `import { ... } from '/script.js';`
        - **修改为直接从正确的源模块导入** `import { ... } from '/scripts/openai.js';`
  - **结果:**
    - **模块加载成功:** 插件现在可以正确地从源头导入所需的函数和变量，彻底解决了因重构引入的两个连续加载错误。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)
